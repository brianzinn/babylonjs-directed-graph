{"version":3,"sources":["queue.ts","GraphSearcher.ts","redux/reducers/graphSelector.ts","redux/reducers/nodes-reducer.ts","redux/actionTypes.ts","redux/reducers/index.ts","redux/sagas.ts","redux/store.ts","components/AddNode.tsx","components/NodeButton.tsx","components/NodeDependencies.tsx","components/HealthSelector.tsx","App.tsx","redux/actions.ts","serviceWorker.ts","index.tsx"],"names":["Queue","_store","val","this","push","shift","length","GraphSearcher","BFS","node","nodes","includeOutEdges","queue","explored","Set","enqueue","add","id","isEmpty","item","dequeue","dependsOn","filter","dnd","has","nodeId","forEach","nodeMatch","find","s","undefined","console","error","dependenceFor","n","version","getNodeGraph","selectedNodeId","matchingNode","selectedNodeGraph","connections","connectedNodes","g","dagre","graphlib","Graph","setGraph","setDefaultEdgeLabel","setNode","toString","label","name","width","height","allDsds","sourceId","targetId","dsdId","setEdge","layout","allNodes","v","lowestX","reduce","accumulator","currentValue","Math","min","x","highestX","max","lowestY","y","highestY","xTranslation","zTranslation","translationVector","Vector3","scaleVector","position","multiplyInPlace","subtractInPlace","edges","e","matchingDsd","w","edgePointsIn3dSpace","edge","points","map","curve","origin","control1","destination","Curve3","CreateQuadraticBezier","CreateCubicBezier","CreateCatmullRomSpline","curvePoints","getPoints","lastTangent","yRotation","tangents","Path3D","getTangents","lookingAt","targetMeshPosition","vectorDirection","diff","subtract","atan2","z","getRotationY","edgePoints","addNodeDependenciesToNodes","nodesDependencies","nodeDependency","fromNodeMatch","fromNodeId","toNodeMatch","toNodeId","directionalDependency","nodeName","description","warn","initialNodes","fileName","healthPercent","sort","a","b","localeCompare","initialState","NodesData","produce","draft","action","type","payload","d","removeNodeDependency","combineReducers","nodesData","createNode","createNodeDependency","mySaga","nextNodeId","log","newNode","put","message","select","JSON","stringify","nextNodeDependencyId","newNodeDependency","all","takeEvery","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","AddNode","props","onNodeNameChange","evt","newNodeName","target","value","setState","state","addButtonClicked","addNode","Box","display","justifyContent","m","p","bgcolor","TextField","onChange","Button","disabled","onClick","Component","NodeButton","selectNode","color","selected","style","paddingRight","useStyles","makeStyles","theme","root","marginTop","spacing","NodeDependencies","selectedNode","addNodeDependency","classes","defaultNodeIds","defaultNodes","useRef","current","includes","useState","selectedNodes","setSelectedNodes","className","Autocomplete","multiple","options","getOptionLabel","option","defaultValue","getOptionSelected","_","updatedNodes","reason","previouslySelectedIds","newNodes","latestIds","renderInput","params","variant","placeholder","healthScores","Array","from","index","HealthSelector","nodeHealthPercent","updateNodeHealthPercent","Select","native","event","percentHealth","Number","inputProps","key","mapDispatchToProps","getNodes","arrowShape","arrowColor","Color3","White","connect","Grid","container","xs","flexWrap","sm","antialias","adaptToDeviceRatio","canvasId","alpha","PI","beta","radius","minZ","wheelPrecision","lowerRadiusLimit","upperRadiusLimit","upperBetaLimit","direction","intensity","setDirectionToTarget","Zero","shadowMinZ","shadowMaxZ","mapSize","useBlurExponentialShadowMap","blurKernel","shadowCastersExcluding","forceBackFacesOnly","depthScale","Fragment","depth","diffuseColor","Red","Blue","specularColor","Black","rootUrl","sceneFilename","scaleToDimension","size","createForParentMesh","hasAlpha","generateMipMaps","samplingMode","Texture","TRILINEAR_SAMPLINGMODE","thickness","cornerRadius","background","verticalAlignment","Control","VERTICAL_ALIGNMENT_TOP","text","fontFamily","fontStyle","fontSize","VERTICAL_ALIGNMENT_BOTTOM","horizontalAlignment","HORIZONTAL_ALIGNMENT_LEFT","left","progressHorizontalMargin","VERTICAL_ALIGNMENT_CENTER","HORIZONTAL_ALIGNMENT_CENTER","c","path","shape","sideOrientation","Mesh","DOUBLESIDE","cap","CAP_ALL","tessellation","diameter","rotation","enableGroundShadow","groundYBias","setMainColor","FromHexString","webVROptions","createDeviceOrientationCamera","enableInteractions","Typography","gutterBottom","Boolean","window","location","hostname","match","darkTheme","createMuiTheme","palette","ReactDOM","render","StrictMode","store","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9f81cafb.chunk.js","sourcesContent":["export default class Queue<T> {\r\n    _store: T[] = [];\r\n\r\n    /**\r\n     * Add an item to the queue.\r\n     * @param val\r\n     */\r\n    enqueue(val: T) {\r\n      this._store.push(val);\r\n    }\r\n\r\n    /**\r\n     * Returns undefined if the queue is empty.\r\n     */\r\n    dequeue(): T | undefined {\r\n      return this._store.shift();\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this._store.length === 0;\r\n    }\r\n  }","import Queue from './queue';\r\nimport { Node } from './types';\r\n\r\nexport default class GraphSearcher<T extends Node> {\r\n    BFS = (node: T, nodes: T[], includeOutEdges: boolean = false): T[] => {\r\n        const queue = new Queue<T>();\r\n        const explored = new Set<number>();\r\n        queue.enqueue(node);\r\n        explored.add(node.id);\r\n        while (!queue.isEmpty()) {\r\n            const item: T = queue.dequeue()!;\r\n            // console.log('dequeued:', item.constructor);\r\n\r\n            item.dependsOn.filter(dnd => !explored.has(dnd.nodeId)).forEach(dnd => {\r\n                const nodeMatch: T | undefined = nodes.find(s => s.id === dnd.nodeId);\r\n                if (nodeMatch === undefined) {\r\n                    console.error(\"Cannot find node for dnd (directional node dependency):\", dnd);\r\n                } else {\r\n                    explored.add(nodeMatch.id);\r\n                    queue.enqueue(nodeMatch);\r\n                }\r\n           });\r\n\r\n            if (includeOutEdges === true) {\r\n                item.dependenceFor.filter(dnd => !explored.has(dnd.nodeId)).forEach(dnd => {\r\n                    const nodeMatch: T | undefined = nodes.find(n => n.id === dnd.nodeId);\r\n                    if (nodeMatch === undefined) {\r\n                        console.error(\"Cannot find node for dnd (Directional Node Dependency):\", dnd);\r\n                    } else {\r\n                        explored.add(nodeMatch.id);\r\n                        queue.enqueue(nodeMatch);\r\n                    }\r\n                });\r\n           }\r\n        }\r\n\r\n        return nodes.filter(n => explored.has(n.id));\r\n     }\r\n}","import dagre, { Node as DagreNode } from 'dagre';\r\nimport { Vector3, Curve3, Path3D } from '@babylonjs/core/Maths'\r\n\r\nimport GraphSearcher from '../../GraphSearcher'\r\nimport { Graph, Node, GraphNode, GraphConnections, DirectionalNodeDependency } from '../../types'\r\n\r\nlet version = 1;\r\n\r\n/**\r\n * \r\n * @param targetMeshPosition\r\n * @param lAt \r\n */\r\nconst getRotationY = (targetMeshPosition: Vector3, vectorDirection: Vector3): number => {\r\n\t/*\r\n\t * tM = mesh to rotate.\r\n\t * lAt = vector3(xyz) of target position to look at\r\n\t */\r\n\t \r\n\tconst diff = vectorDirection.subtract(targetMeshPosition);\r\n    // return -Math.atan2(diff.z, diff.x) - (3 * (Math.PI / 4));\r\n    return  -Math.atan2(diff.z, diff.x)\r\n}\r\n\r\nconst getNodeGraph = (selectedNodeId: number | undefined, nodes: Node[]): Graph | undefined => {\r\n    version++;\r\n    const matchingNode = nodes.find(s => s.id === selectedNodeId);\r\n    if (matchingNode === undefined) {\r\n        console.error('no matching node found.', selectedNodeId)\r\n        return undefined;\r\n    }\r\n\r\n    let selectedNodeGraph: Graph = {\r\n        nodes: [],\r\n        connections: [],\r\n        version\r\n    };\r\n\r\n    const includeOutEdges = true; // makes the graph larger and connect nodes that connect to this one\r\n    const connectedNodes: Node[] = new GraphSearcher<Node>().BFS(matchingNode!, nodes, includeOutEdges);\r\n    // console.log(\"Nodes from selected:\", connectedNodes.map(s => s.name).join(','));\r\n    var g = new dagre.graphlib.Graph();\r\n    g.setGraph({});\r\n    g.setDefaultEdgeLabel(function () { return {}; });\r\n    connectedNodes.forEach(s => {\r\n        // using 100 pixels, while our objects are 1 meter in 3d space (guesstimate)\r\n        g.setNode(s.id.toString(), { label: s.name, width: 100, height: 100, nodeId: s.id });\r\n    });\r\n\r\n    // used to lookup edge - needed to connected to ID to make unique to render (key)\r\n    type dsdLookup = {\r\n        sourceId: string,\r\n        targetId: string,\r\n        dsdId: number\r\n    }\r\n    const allDsds: dsdLookup[] = [];\r\n\r\n    connectedNodes.forEach(n => {\r\n        n.dependsOn.forEach((dnd: DirectionalNodeDependency) => {\r\n            allDsds.push({\r\n                sourceId: n.id.toString(),\r\n                targetId: dnd.nodeId.toString(),\r\n                dsdId: dnd.id\r\n            });\r\n            g.setEdge(n.id.toString(), dnd.nodeId.toString());\r\n        });\r\n    });\r\n    dagre.layout(g);\r\n    const allNodes: DagreNode[] = [];\r\n    g.nodes().forEach(function (v) {\r\n        allNodes.push(g.node(v));\r\n    });\r\n    /* we are converting pixels to meters */\r\n    // TODO: gosh, may as well do this in one loop now...\r\n    const DIVISOR = 50;\r\n    const lowestX = allNodes.reduce((accumulator, currentValue) => Math.min(accumulator, currentValue.x), 9999) / DIVISOR;\r\n    const highestX = allNodes.reduce((accumulator, currentValue) => Math.max(accumulator, currentValue.x), 0) / DIVISOR;\r\n    const lowestY = allNodes.reduce((accumulator, currentValue) => Math.min(accumulator, currentValue.y), 9999) / DIVISOR;\r\n    const highestY = allNodes.reduce((accumulator, currentValue) => Math.max(accumulator, currentValue.y), 0) / DIVISOR;\r\n    const xTranslation = (highestX - lowestX) / 2;\r\n    const zTranslation = (highestY - lowestY) / 2;\r\n    // y-up (right handed system)\r\n    const translationVector = new Vector3(xTranslation, 0, zTranslation);\r\n    const scaleVector = new Vector3(1 / DIVISOR, 0, 1 / DIVISOR);\r\n\r\n    const HEIGHT_ABOVE_GROUND: number = 1.0;\r\n\r\n    allNodes.forEach(node => {\r\n        selectedNodeGraph.nodes.push({\r\n            nodeId: (node as any).nodeId,\r\n            name: (node as any).label,\r\n            node: nodes.find(n => n.id === (node as any).nodeId), \r\n            position: new Vector3(node.x, HEIGHT_ABOVE_GROUND, node.y).multiplyInPlace(scaleVector).subtractInPlace(translationVector),\r\n            x: (node.x / DIVISOR) - xTranslation,\r\n            y: (node.y / DIVISOR) - zTranslation\r\n        } as GraphNode);\r\n    });\r\n    g.edges().forEach(e => {\r\n        const matchingDsd = allDsds.find(dnd => dnd.sourceId === e.v && dnd.targetId === e.w);\r\n        if (matchingDsd === undefined) {\r\n            console.error('cannot find DND for edge:', e);\r\n        }\r\n\r\n        const edge = g.edge(e);\r\n        const edgePointsIn3dSpace: Vector3[] = edge.points.map(e => new Vector3(e.x, 0, e.y).multiplyInPlace(scaleVector).subtractInPlace(translationVector));\r\n        let curve: Curve3 | undefined = undefined;\r\n        if (edgePointsIn3dSpace.length < 3) {\r\n            console.error(`found ${edgePointsIn3dSpace.length} < 3 control points on edge:`, matchingDsd);\r\n        } else {\r\n            const origin = edgePointsIn3dSpace[0];\r\n            const control1 = edgePointsIn3dSpace[1];\r\n            const destination = edgePointsIn3dSpace[edgePointsIn3dSpace.length - 1]\r\n\r\n            switch (edgePointsIn3dSpace.length) {\r\n                case 3:\r\n                    curve = Curve3.CreateQuadraticBezier(origin, control1, destination, 50);\r\n                    break;\r\n                case 4:\r\n                    curve = Curve3.CreateCubicBezier(origin, control1, edgePointsIn3dSpace[2], destination, 80);\r\n                    break;\r\n                default:\r\n                    curve = Curve3.CreateCatmullRomSpline(edgePointsIn3dSpace, edgePointsIn3dSpace.length * 25, false);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const curvePoints = curve !== undefined ? curve.getPoints() : [];\r\n        let lastTangent: Vector3 | undefined = undefined;\r\n        let yRotation: number | undefined = undefined;\r\n\r\n        if (curvePoints.length > 0) {\r\n            const path = new Path3D(curvePoints);\r\n            const tangents: Vector3[] = path.getTangents();\r\n            lastTangent = tangents[tangents.length - 1];\r\n            // const lastPoint = curvePoints[curvePoints.length - 1];\r\n            // yRotation = -Math.atan2(lastTangent.z, lastTangent.x) + Math.PI / 6;\r\n\r\n            const lookingAt = curvePoints[curvePoints.length - 1].add(lastTangent);\r\n            yRotation = getRotationY(curvePoints[curvePoints.length - 1], lookingAt);\r\n            // console.log(`from ${matchingDsd?.sourceId} to ${matchingDsd?.targetId} => ${yRotation} =? ${yRotation * 180/Math.PI}`)\r\n        }\r\n\r\n        const edgePoints: GraphConnections ={\r\n            id: matchingDsd!.dsdId,\r\n            points: edgePointsIn3dSpace,\r\n            curvePoints,\r\n            lastTangent,\r\n            yRotation\r\n        };\r\n        \r\n        selectedNodeGraph.connections.push(edgePoints);\r\n    });\r\n\r\n    return selectedNodeGraph;\r\n}\r\n\r\nexport default getNodeGraph;","import produce from 'immer'\r\n\r\nimport { GET_NODES_SUCCESS, SELECT_NODE, ADD_NODE_SUCCESS, GET_NODES_DEPENDENCIES_SUCCESS, ADD_NODE_DEPENDENCY_SUCCESS, REMOVE_NODE_DEPENDENCY_SUCCESS, UPDATE_NODE_HEALTH } from \"../actionTypes\";\r\nimport { Node, DirectionalNodeDependency, NodeDependencyDb, Graph } from '../../types'\r\nimport getNodeGraph from './graphSelector'\r\n\r\ntype NodeState = {\r\n    nodes: Node[],\r\n    nodesDependencies: NodeDependencyDb[],\r\n    selectedNodeId?: number,\r\n    selectedNodeGraph?: Graph\r\n}\r\n\r\nconst removeNodeDependency = (nodeDependency: NodeDependencyDb, nodes: Node[]): void => {\r\n    const fromNodeMatch = nodes.find(s => s.id === nodeDependency.fromNodeId);\r\n    const toNodeMatch = nodes.find(s => s.id === nodeDependency.toNodeId);\r\n    if (fromNodeMatch !== undefined && toNodeMatch !== undefined) {\r\n        // console.log('filtering depends on:', fromNodeMatch, nodeDependency)\r\n        fromNodeMatch.dependsOn = fromNodeMatch.dependsOn.filter(d => d.id !== nodeDependency.id);\r\n    }\r\n    else {\r\n        console.warn(\"cannot find node dependant upon (delete):\", nodeDependency);\r\n    }\r\n    if (toNodeMatch !== undefined && fromNodeMatch !== undefined) {\r\n        toNodeMatch.dependenceFor = toNodeMatch.dependenceFor.filter(d => d.id !== nodeDependency.id);\r\n    }\r\n    else {\r\n        console.warn(\"Cannot find node for dependancy (delete):\", nodeDependency);\r\n    }\r\n}\r\n\r\nconst addNodeDependenciesToNodes = (nodesDependencies: NodeDependencyDb[], nodes: Node[]): void => {\r\n    nodesDependencies.forEach((nodeDependency: NodeDependencyDb) => {\r\n        // TODO: memoize this function for larger collections\r\n        const fromNodeMatch = nodes.find(n => n.id === nodeDependency.fromNodeId);\r\n        const toNodeMatch = nodes.find(n => n.id === nodeDependency.toNodeId);\r\n        if (fromNodeMatch !== undefined && toNodeMatch !== undefined) {\r\n            const directionalDependency: DirectionalNodeDependency = {\r\n                id: nodeDependency.id,\r\n                nodeId: toNodeMatch.id,\r\n                nodeName: toNodeMatch.name,\r\n                description: nodeDependency.description\r\n            };\r\n            // console.log(\"  > depends on adding:\", fromNodeMatch, directionalDependency);\r\n            fromNodeMatch.dependsOn.push(directionalDependency);\r\n        }\r\n        else {\r\n            console.warn(\"cannot find node dependant upon:\", nodeDependency);\r\n        }\r\n        if (toNodeMatch !== undefined && fromNodeMatch !== undefined) {\r\n            const directionalDependency: DirectionalNodeDependency = {\r\n                id: nodeDependency.id,\r\n                nodeId: fromNodeMatch.id,\r\n                nodeName: fromNodeMatch.name,\r\n                description: nodeDependency.description\r\n            };\r\n            // console.log(\"  > dependency for:\", toNodeMatch, directionalDependency);\r\n            toNodeMatch.dependenceFor.push(directionalDependency);\r\n        }\r\n        else {\r\n            console.warn(\"Cannot find node for dependancy:\", nodeDependency);\r\n        }\r\n    });\r\n}\r\n\r\nconst initialNodes: Node[] = [{\r\n    name: 'Bank',\r\n    fileName: 'Bank.obj',\r\n    healthPercent: 100,\r\n    id: 1,\r\n    dependsOn: [{\r\n        id: 1,\r\n        nodeId: 2,\r\n        nodeName: 'Flat',\r\n        description: 'bank to flat'\r\n    }],\r\n    dependenceFor: []\r\n}, {\r\n    name: 'Flat',\r\n    fileName: 'Flat.obj',\r\n    healthPercent: 100,\r\n    id: 2,\r\n    dependsOn: [],\r\n    dependenceFor: []\r\n}, {\r\n    name: 'Flat 2',\r\n    fileName: 'Flat2.obj',\r\n    healthPercent: 100,\r\n    id: 3,\r\n    dependsOn: [],\r\n    dependenceFor: []\r\n}, {\r\n    name: 'Hospital',\r\n    fileName: 'Hospital.obj',\r\n    healthPercent: 100,\r\n    id: 4,\r\n    dependsOn: [],\r\n    dependenceFor: []\r\n}, {\r\n    name: 'House',\r\n    fileName: 'House.obj',\r\n    healthPercent: 100,\r\n    id: 5,\r\n    dependsOn: [],\r\n    dependenceFor: []\r\n}, {\r\n    name: 'House 2',\r\n    fileName: 'House2.obj',\r\n    healthPercent: 100,\r\n    id: 6,\r\n    dependsOn: [],\r\n    dependenceFor: []\r\n}, {\r\n    name: 'House 3',\r\n    fileName: 'House3.obj',\r\n    healthPercent: 100,\r\n    id: 7,\r\n    dependsOn: [],\r\n    dependenceFor: []\r\n}, {\r\n    name: 'House 4',\r\n    fileName: 'House4.obj',\r\n    healthPercent: 100,\r\n    id: 8,\r\n    dependsOn: [],\r\n    dependenceFor: []\r\n}, {\r\n    name: 'House 5',\r\n    fileName: 'House5.obj',\r\n    healthPercent: 100,\r\n    id: 9,\r\n    dependsOn: [],\r\n    dependenceFor: []\r\n}, {\r\n    name: 'Shop',\r\n    fileName: 'Shop.obj',\r\n    healthPercent: 100,\r\n    id: 10,\r\n    dependsOn: [],\r\n    dependenceFor: []\r\n}].sort((a, b) => a.name.localeCompare(b.name))\r\n\r\nconst initialState: NodeState = {\r\n    nodes: initialNodes,\r\n    nodesDependencies: [{\r\n        id: 1,\r\n        fromNodeId: 1,\r\n        toNodeId: 2,\r\n        description: 'bank to flat'\r\n    }],\r\n    selectedNodeId: 1,\r\n    selectedNodeGraph: getNodeGraph(1, initialNodes)\r\n};\r\n\r\nconst NodesData = produce(\r\n    (draft: NodeState, action: any) => {\r\n        switch (action.type) {\r\n            case GET_NODES_SUCCESS: {\r\n                draft.nodes = action.nodes.sort((a: Node, b: Node) => a.name.localeCompare(b.name))\r\n                break;\r\n            }\r\n            case SELECT_NODE: {\r\n                draft.selectedNodeId = action.payload.id;\r\n                draft.selectedNodeGraph = getNodeGraph(draft.selectedNodeId, draft.nodes);\r\n                break;\r\n            }\r\n            case ADD_NODE_SUCCESS: {\r\n                draft.nodes = [\r\n                    ...draft.nodes,\r\n                    action.payload\r\n                ].sort((a: Node, b: Node) => a.name.localeCompare(b.name))\r\n                break;\r\n            }\r\n            case GET_NODES_DEPENDENCIES_SUCCESS: {\r\n                const { nodesDependencies } = action;\r\n\r\n                addNodeDependenciesToNodes(nodesDependencies, draft.nodes);\r\n                draft.nodesDependencies = nodesDependencies\r\n                break;\r\n            }\r\n            case ADD_NODE_DEPENDENCY_SUCCESS:\r\n            {\r\n                const { payload } = action;\r\n                addNodeDependenciesToNodes([payload], draft.nodes);\r\n\r\n                draft.selectedNodeGraph = getNodeGraph(draft.selectedNodeId, draft.nodes);\r\n                draft.nodesDependencies.push(payload);\r\n                break;\r\n            }\r\n            case REMOVE_NODE_DEPENDENCY_SUCCESS:\r\n            {\r\n                const { nodeDependency } = action.payload;\r\n                removeNodeDependency(nodeDependency, draft.nodes);\r\n\r\n                draft.selectedNodeGraph = getNodeGraph(draft.selectedNodeId, draft.nodes);\r\n                draft.nodesDependencies = draft.nodesDependencies.filter((d: NodeDependencyDb) => d.id !== nodeDependency.id);\r\n                break;\r\n            }\r\n            case UPDATE_NODE_HEALTH:\r\n            {\r\n                const { nodeId, healthPercent } = action.payload;\r\n                const nodeMatch = draft.nodes.find(s => s.id === nodeId);\r\n                if (nodeMatch === undefined) {\r\n                    console.error('cannot update node health score (cannot find node)', nodeId);\r\n                } else {\r\n                    nodeMatch.healthPercent = healthPercent;\r\n                    // hack for now\r\n                    const graphMatch = draft.selectedNodeGraph?.nodes.find(n => n.nodeId === nodeId);\r\n                    graphMatch!.node.healthPercent = healthPercent;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    },\r\n    initialState\r\n)\r\n;\r\n\r\nexport default NodesData;","export const ADD_NODE = \"ADD_NODE\";\r\nexport const ADD_NODE_SUCCESS = \"ADD_NODE_SUCCESS\"\r\nexport const ADD_NODE_ERROR = \"ADD_NODE_ERROR\"\r\n\r\nexport const GET_NODES = \"GET_NODES\";\r\nexport const GET_NODES_SUCCESS = \"GET_NODES_SUCCESS\"\r\nexport const GET_NODES_ERROR = \"GET_NODES_ERROR\"\r\n\r\nexport const GET_NODES_DEPENDENCIES_SUCCESS = \"GET_NODES_DEPENDENCIES_SUCCESS\"\r\n\r\nexport const SELECT_NODE = \"SELECT_NODE\";\r\n\r\nexport const ADD_NODE_DEPENDENCY = \"ADD_NODE_DEPENDENCY\";\r\nexport const ADD_NODE_DEPENDENCY_SUCCESS = \"ADD_NODE_DEPENDENCY_SUCCESS\";\r\nexport const ADD_NODE_DEPENDENCY_ERROR = \"ADD_NODE_DEPENDENCY_ERROR\";\r\n\r\nexport const REMOVE_NODE_DEPENDENCY = \"REMOVE_NODE_DEPENDENCY\";\r\nexport const REMOVE_NODE_DEPENDENCY_SUCCESS = \"REMOVE_NODE_DEPENDENCY_SUCCESS\";\r\nexport const REMOVE_NODE_DEPENDENCY_ERROR = \"REMOVE_NODE_DEPENDENCY_ERROR\";\r\n\r\nexport const UPDATE_NODE_HEALTH = \"UPDATE_NODE_HEALTH\";\r\n\r\n","import { combineReducers } from 'redux';\r\nimport nodesData from './nodes-reducer'\r\n\r\nexport default combineReducers({ nodesData });","import { select, put, takeEvery, all } from 'redux-saga/effects'\r\nimport {\r\n  ADD_NODE, ADD_NODE_SUCCESS, ADD_NODE_ERROR,\r\n  ADD_NODE_DEPENDENCY, ADD_NODE_DEPENDENCY_ERROR, ADD_NODE_DEPENDENCY_SUCCESS,\r\n  REMOVE_NODE_DEPENDENCY, REMOVE_NODE_DEPENDENCY_SUCCESS, REMOVE_NODE_DEPENDENCY_ERROR\r\n} from './actionTypes'\r\n\r\nimport { Node, NodeDependencyDb } from '../types'\r\n\r\nlet nextNodeId = 99; // since we are not using a database\r\n\r\nfunction* createNode(action: any) {\r\n    console.log('adding NODE:', action.payload.name)\r\n    \r\n    try {\r\n        // const response: any = yield call(apiAddNode, action.payload.name);\r\n        // const newNode = response?.data?.node;\r\n        const newNode = {\r\n            id: nextNodeId++,\r\n            name: action.payload.name,\r\n            dependsOn: [],\r\n            dependenceFor: [],\r\n            healthPercent: 100\r\n        } as Node;\r\n        yield put({type: ADD_NODE_SUCCESS, payload: newNode})\r\n    } catch (e) {\r\n        yield put({type: ADD_NODE_ERROR, message: e.message})\r\n    }\r\n}\r\n\r\nfunction* removeNodeDependency(action: any) {\r\n  try {\r\n    const { fromNodeId, toNodeId } = action.payload;\r\n\r\n    // const response = yield call(apiDeleteDependency, fromNodeId, toNodeId);\r\n    // if (response.statusText === 'OK') {\r\n    // const deletedNodeDependency = getDeletedDependencyResponse?.data?.nodeDependencies[0];\r\n    const { nodesData } = yield select();\r\n    const nodeDependency = nodesData.nodesDependencies.find((n: NodeDependencyDb) => n.fromNodeId === fromNodeId && n.toNodeId === toNodeId);\r\n    \r\n    if (nodeDependency !== undefined) {\r\n      yield put({type: REMOVE_NODE_DEPENDENCY_SUCCESS, payload: { nodeDependency }})\r\n    } else {\r\n      yield put({type: REMOVE_NODE_DEPENDENCY_ERROR, message: `cannot find: ${JSON.stringify(action.payload)}`})\r\n    }\r\n  } catch (e) {\r\n      yield put({type: REMOVE_NODE_DEPENDENCY_ERROR, message: e.message})\r\n  }\r\n}\r\n\r\nlet nextNodeDependencyId = 99; // hack without a backing API\r\n\r\nfunction* createNodeDependency(action: any) {\r\n  try {\r\n      const { fromNodeId, toNodeId } = action.payload;\r\n      // const response: any = yield call(apiAddNodeDependency, fromNodeId, toNodeId );\r\n      // const newNodeDependency = response?.data?.nodeDependency;\r\n      const newNodeDependency = {\r\n          id: nextNodeDependencyId++,\r\n          fromNodeId: fromNodeId,\r\n          toNodeId: toNodeId,\r\n          description: ''\r\n      } as NodeDependencyDb;\r\n      yield put({type: ADD_NODE_DEPENDENCY_SUCCESS, payload: newNodeDependency})\r\n  } catch (e) {\r\n      yield put({type: ADD_NODE_DEPENDENCY_ERROR, message: e.message})\r\n  }\r\n}\r\n\r\n// // worker Saga: will be fired on GET_NODES actions\r\n// function* fetchNodes() {\r\n//     try {\r\n//         const nodesResponse = yield call(getNodes);\r\n//         // TODO: this needs to do multiple pages (as a saga to get all nodes)\r\n//         yield put({type: GET_NODES_SUCCESS, NODEs: nodesResponse?.data?.nodes.map((node: any): node => ({\r\n//             id: node.id,\r\n//             name: node.name,\r\n//             healthPercent: 100,\r\n//             dependsOn: [],\r\n//             dependenceFor: []\r\n//         }))});\r\n\r\n//         const nodesDependenciesResponse = yield call(getNodesDependencies);\r\n//         const { nodeDependencies, metadata } = nodesDependenciesResponse?.data;\r\n//         if (metadata.totalPages > 1) {\r\n//           console.error('need to add paging...')\r\n//         }\r\n\r\n//         const nodesDependencies = nodeDependencies.map((nodeDependency: any) => ({\r\n//           id: nodeDependency.id,\r\n//           fromNodeId: nodeDependency.fromNodeId,\r\n//           toNodeId: nodeDependency.toNodeId,\r\n//           description: nodeDependency.description\r\n//         }))\r\n\r\n//         yield put({type: GET_NODES_DEPENDENCIES_SUCCESS, nodesDependencies })\r\n        \r\n//    } catch (e) {\r\n//       yield put({type: GET_NODES_ERROR, message: e.message});\r\n//    }\r\n// }\r\n\r\n/*\r\n  Starts getNodes on each dispatched `GET_NODES` action.\r\n  Allows concurrent fetches of NODEs.\r\n*/\r\nfunction* mySaga() {\r\n  yield all([\r\n    // takeEvery(GET_NODES, fetchNODEs),\r\n    takeEvery(ADD_NODE, createNode),\r\n    takeEvery(ADD_NODE_DEPENDENCY, createNodeDependency),\r\n    takeEvery(REMOVE_NODE_DEPENDENCY, removeNodeDependency)\r\n  ])\r\n}\r\n\r\nexport default mySaga;","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from \"./reducers\";\r\nimport mySaga from './sagas'\r\n\r\n// create the saga middleware\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    composeWithDevTools(\r\n        applyMiddleware(sagaMiddleware)\r\n    ),\r\n    \r\n);\r\n\r\n// then run the saga\r\nsagaMiddleware.run(mySaga)","import React , { Component } from 'react'\r\n\r\nimport Box from '@material-ui/core/Box';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ntype ComponentProps = {\r\n    addNode: (name: string) => void;\r\n}\r\n\r\ntype ComponentState = {\r\n    newNodeName: string\r\n  }\r\n\r\nexport default class AddNode extends Component<ComponentProps, ComponentState> {\r\n\r\n    constructor(props: ComponentProps ) {\r\n        super(props)\r\n        this.state = {\r\n          newNodeName: ''\r\n        }\r\n    }\r\n    \r\n\r\n    onNodeNameChange = (evt: any) => {\r\n        const newNodeName = evt.target.value\r\n        this.setState((state) => ({\r\n          ...state,\r\n          newNodeName\r\n        }))\r\n    }\r\n\r\n    addButtonClicked = () => {\r\n        this.props.addNode(this.state.newNodeName);\r\n        // assumes success :)\r\n        this.setState(state => ({\r\n            ...state,\r\n            newNodeName: ''\r\n        }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Box display=\"flex\" justifyContent=\"flex-end\" m={1} p={1} bgcolor=\"background.paper\">\r\n                <TextField id=\"standard-basic\" label=\"new building name\" value={this.state.newNodeName} onChange={this.onNodeNameChange} />\r\n                <Button disabled={this.state.newNodeName.length <= 3} onClick={this.addButtonClicked}>add</Button>\r\n            </Box>        \r\n        )\r\n    }\r\n}","import React, { Component, MouseEvent as ReactMouseEvent } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { Node } from '../types'\r\n\r\ntype NodeButtonProps = {\r\n    node: Node;\r\n    setNode: (id: number) => void;\r\n    selected: boolean;\r\n}\r\n\r\nexport default class NodeButton extends Component<NodeButtonProps> {\r\n    selectNode = (evt: ReactMouseEvent<HTMLButtonElement, MouseEvent>): void => {\r\n        this.props.setNode(this.props.node.id);\r\n    }\r\n    \r\n    render () {\r\n        return (\r\n            <Button onClick={this.selectNode} color={this.props.selected ? 'secondary' : undefined} style={{paddingRight: '5px'}}>\r\n                <span>{this.props.node.name}</span>\r\n            </Button>\r\n        )\r\n    }\r\n}","import React, { useState, useRef } from 'react'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { Node } from '../types'\r\n\r\ntype NodeDependenciesProps = {\r\n    nodes: Node[],\r\n    selectedNode: Node,\r\n    addNodeDependency: (fromNodeId: number, toNodeId: number) => void,\r\n    removeNodeDependency: (fromNodeId: number, toNodeId: number) => void\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 500,\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(3),\r\n        },\r\n    },\r\n}));\r\n\r\nconst NodeDependencies = ({ nodes, selectedNode, addNodeDependency, removeNodeDependency }: NodeDependenciesProps) => {\r\n    const classes = useStyles();\r\n\r\n    const defaultNodeIds = selectedNode.dependsOn.map(d => d.nodeId);\r\n\r\n    const defaultNodes = useRef<Node[] | null>(null); // to avoid material UI controlled messages\r\n    if (defaultNodes.current === null) {\r\n        defaultNodes.current = nodes.filter(s => defaultNodeIds.includes(s.id));\r\n    }\r\n\r\n    const [selectedNodes, setSelectedNodes] = useState<Node[]>(defaultNodes.current);\r\n\r\n    // fn is not memoized\r\n    const onDependenciesChange = (_: object, updatedNodes: any, reason: string) => {\r\n        updatedNodes = (updatedNodes === null ? [] : updatedNodes) as Node[];\r\n\r\n        const previouslySelectedIds: number[] = selectedNodes.map(n => n.id);\r\n        const newNodes: Node[] = updatedNodes.filter((n: Node) => !previouslySelectedIds.includes(n.id))\r\n        if (newNodes.length) {\r\n            newNodes.forEach(n => addNodeDependency(selectedNode.id, n.id))\r\n            // console.log('new nodes added:', newNodes);\r\n        } else {\r\n            const latestIds: number[] = updatedNodes.map((n: Node) => n.id);\r\n            const removedNodes = selectedNodes.filter((n: Node) => !latestIds.includes(n.id));\r\n            // console.log('removed nodes:', removedNodes);\r\n            removedNodes.forEach(n => removeNodeDependency(selectedNode.id, n.id))\r\n        }\r\n        // switch (reason) {\r\n        //     case 'select-option':\r\n        //         items.forEach((item: any) => addNodeDependency(selectedNode.id, item.value))\r\n        //         break;\r\n        //     case 'remove-option':\r\n        //         console.log('removing', _, items);\r\n        //         items.forEach((item: any) => removeNodeDependency(selectedNode.id, item.value))\r\n        //         break;\r\n        //     default:\r\n        //         console.error(\"unsupported reason (freeSolo not enabled)\", reason, items);\r\n        //         break;\r\n        // }\r\n        setSelectedNodes(updatedNodes);\r\n    };\r\n\r\n    return <div className={classes.root}>\r\n        <Autocomplete\r\n            multiple\r\n            id=\"buildings-standard\"\r\n            options={nodes}\r\n            getOptionLabel={(option: Node) => option.name}\r\n            defaultValue={defaultNodes.current}\r\n            getOptionSelected={(option, value) => value.id === option.id}\r\n            onChange={onDependenciesChange}\r\n            renderInput={(params: any) => (\r\n                <TextField\r\n                    {...params}\r\n                    variant=\"standard\"\r\n                    label=\"Directly Connected To\"\r\n                    placeholder=\"buildings\"\r\n                />\r\n            )}\r\n        />\r\n    </div>\r\n}\r\nexport default NodeDependencies","import React from 'react';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst PERCENT_GAPS = 5;\r\nconst healthScores = [...Array.from(new Array(100 / PERCENT_GAPS + 1), (_, index) => index * PERCENT_GAPS)]\r\n\r\ntype HealthSelectorProps = {\r\n    nodeId: number,\r\n    nodeHealthPercent: number,\r\n    updateNodeHealthPercent: (nodeId: number, healthPercent: number) => void\r\n};\r\n\r\n// TODO: remove this now that we moved away from react-select\r\nexport type NodeDependencyListItem = {\r\n    value: number,\r\n    label: string,\r\n    id: number /* needed for removal */\r\n}\r\n\r\nconst HealthSelector = ({ nodeId, nodeHealthPercent, updateNodeHealthPercent }: HealthSelectorProps) => {\r\n    const handleChange = (event: any /* TODO: find ValueType<T> declaration */) => {\r\n        const percentHealth = event.target.value;\r\n        updateNodeHealthPercent(nodeId, Number(percentHealth));\r\n    }\r\n\r\n    return (\r\n        <Select\r\n            native\r\n            defaultValue={nodeHealthPercent ?? 100}\r\n            onChange={handleChange}\r\n            inputProps={{\r\n                name: 'health',\r\n                id: 'health-percent',\r\n            }}\r\n        >\r\n            {\r\n                healthScores.map((d: number) => <option key={`score-${d}`} value={d}>{d}</option>)\r\n            }\r\n        </Select>\r\n    )\r\n}\r\n\r\nexport default HealthSelector","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Vector3, Color3 } from '@babylonjs/core/Maths/math'\r\nimport { Mesh } from '@babylonjs/core/Meshes/mesh'\r\nimport { Texture } from '@babylonjs/core/Materials/Textures/texture'\r\nimport { Control } from '@babylonjs/gui/2D/controls/control'\r\nimport { Scene, Engine } from 'react-babylonjs'\r\n\r\nimport AddNode from './components/AddNode';\r\nimport NodeButton from './components/NodeButton';\r\nimport NodeDependencies from './components/NodeDependencies';\r\nimport HealthSelector from './components/HealthSelector'\r\nimport { getNodes, selectNode, addNode, addNodeDependency, removeNodeDependency, updateNodeHealthPercent } from './redux/actions';\r\nimport { Node, GraphNode, Graph, GraphConnections } from './types';\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state: any /*, ownProps*/) => {\r\n  const { nodesData } = state;\r\n  const props = {\r\n    nodes: nodesData.nodes,\r\n    selectedNodeId: nodesData.selectedNodeId,\r\n    selectedNode: nodesData.nodes.find((node: Node) => node.id === nodesData.selectedNodeId),\r\n    selectedNodeGraph: nodesData.selectedNodeGraph\r\n  }\r\n\r\n  return props;\r\n}\r\n\r\ntype DispatchProps = {\r\n  getNodes: () => void;\r\n  selectNode: (id: number) => void;\r\n  addNode: (name: string) => void;\r\n  addNodeDependency: (fromNodeId: number, toNodeId: number) => void;\r\n  removeNodeDependency: (fromNodeId: number, toNodeId: number) => void;\r\n  updateNodeHealthPercent: (nodeId: number, healthPercent: number) => void;\r\n}\r\n\r\ntype MapProps = {\r\n  nodes: Node[];\r\n  selectedNodeId?: number;\r\n  selectedNode?: Node;\r\n  selectedNodeGraph?: Graph;\r\n}\r\n\r\nconst mapDispatchToProps = { getNodes, selectNode, addNode, addNodeDependency, removeNodeDependency, updateNodeHealthPercent }\r\n\r\ntype ComponentProps = DispatchProps & MapProps\r\n\r\n//Array of paths to construct extrusion\r\nconst width = 0.025;\r\nconst height = 0.025;\r\nconst arrowShape = [\r\n  new Vector3(width/2, height/-2, 0),\r\n  new Vector3(width/2, height/2, 0),\r\n  new Vector3(width/-2, height/2, 0),\r\n  new Vector3(width/-2, height/-2, 0) \r\n];\r\n\r\nconst arrowColor = Color3.White();\r\n\r\nconst progressHorizontalMargin: number = 0.02;\r\nconst progressVerticalMargin: number = 0.1;\r\n\r\narrowShape.push(arrowShape[0]);\r\n\r\nconst App: React.FC<ComponentProps> = ({ getNodes, selectNode, addNode, addNodeDependency, removeNodeDependency, updateNodeHealthPercent, nodes, selectedNodeId, selectedNode, selectedNodeGraph }: ComponentProps) => {\r\n\r\n  // useEffect(() => {\r\n  //   // to load cities from remote site...\r\n  //   // getNodes()\r\n  // }, []);\r\n\r\n  return (\r\n    <Grid container spacing={0}>\r\n      <Grid key='header' item xs={12}>\r\n        <AddNode addNode={addNode} />\r\n      </Grid>\r\n      <Grid key='buttons' item xs={12}>\r\n        <Box\r\n          display=\"flex\"\r\n          flexWrap=\"wrap\"\r\n          p={1}\r\n          m={1}\r\n          bgcolor=\"background.paper\"\r\n        >\r\n        {\r\n        nodes.map((node: any) => (\r\n          <Box p={1} key={`button=${node.id}`}>\r\n            <NodeButton node={node} setNode={selectNode} selected={node.id === selectedNodeId} />\r\n          </Box>\r\n        ))\r\n        }\r\n        </Box>\r\n      </Grid>\r\n      <Grid key='application' container item xs={12} spacing={3}>\r\n        <Grid key='canvas' item xs={12} sm={6}>\r\n          <Engine antialias={true} adaptToDeviceRatio={true} canvasId=\"sample-canvas\">\r\n            <Scene>\r\n              <arcRotateCamera name=\"arc\" target={ new Vector3(0, 1, 0) }\r\n                    alpha={-Math.PI / 2} beta={(0.5 + (Math.PI / 4))}\r\n                    radius={4} minZ={0.001} wheelPrecision={50} \r\n                    lowerRadiusLimit={0.1} upperRadiusLimit={20} upperBetaLimit={Math.PI / 2} />\r\n              <hemisphericLight name='hemi' direction={new Vector3(0, -1, 0)} intensity={0.6} />\r\n              <directionalLight name=\"shadow-light\" setDirectionToTarget={[Vector3.Zero()]} direction={Vector3.Zero()} position = {new Vector3(-40, 30, -40)}\r\n                intensity={0.05} shadowMinZ={1} shadowMaxZ={2500}>\r\n                <shadowGenerator mapSize={1024} useBlurExponentialShadowMap={false} blurKernel={32}\r\n                  shadowCastersExcluding={['ground', 'gazeTracker', 'BackgroundHelper', 'BackgroundPlane', 'BackgroundSkybox']} forceBackFacesOnly={true} depthScale={100} />\r\n              </directionalLight>\r\n              {selectedNodeGraph && selectedNodeGraph.nodes.map((s: GraphNode) =>\r\n                  <React.Fragment key={`graph-node-${s.nodeId}`}>\r\n                    {(s.node?.fileName === undefined) &&\r\n                      <box name={`box-${s.nodeId}`} key={`box-${s.nodeId}`} height={0.25} width={1} depth={1} position={s.position}>\r\n                        <standardMaterial name={`mat-${s.nodeId}`} diffuseColor={s.nodeId === selectedNodeId ? Color3.Red() : Color3.Blue()} specularColor={Color3.Black()} />\r\n                      </box>\r\n                    }\r\n                    {(s.node?.fileName !== undefined) &&\r\n                      <model key={`model-${s.nodeId}`} rootUrl='/assets/quaternius_buildings/' sceneFilename={s.node?.fileName} scaleToDimension={1} position={s.position} />\r\n                    }\r\n                    <plane key={`plane-${s.nodeId}`} name=\"dialog\" size={2} position={s.position.add(new Vector3(0, 1.25, 0))}>\r\n                      <advancedDynamicTexture name=\"dialogTexture\" height={1024} width={1024}\r\n                        createForParentMesh={true}\r\n                        hasAlpha={true}\r\n                        generateMipMaps={true}\r\n                        samplingMode={Texture.TRILINEAR_SAMPLINGMODE}\r\n                      >\r\n                        <rectangle name=\"rect-1\" height={0.25} width={1} thickness={12} cornerRadius={24} background='#666666'>\r\n                            <rectangle height={0.7} verticalAlignment={Control.VERTICAL_ALIGNMENT_TOP}>\r\n                              <textBlock text={s.name} fontFamily=\"FontAwesome\" fontStyle=\"bold\" fontSize={200} color=\"white\" />\r\n                            </rectangle>\r\n                            <rectangle name=\"background-rectangle\" width={1} height={0.3} background={'#596877'} cornerRadius={10} thickness={4} verticalAlignment={Control.VERTICAL_ALIGNMENT_BOTTOM} >\r\n                              <container name=\"progress-container\" horizontalAlignment={Control.HORIZONTAL_ALIGNMENT_LEFT} width={1-progressHorizontalMargin} left={`${progressHorizontalMargin/2 * 100}%`} height={`${(1-progressVerticalMargin*2) * 100}%`} >\r\n                                <rectangle name=\"progress-rectangle\" horizontalAlignment={Control.HORIZONTAL_ALIGNMENT_LEFT} background={(s.node!.healthPercent > 75) ? '#7BC14E' : '#FF0000'} cornerRadius={10} thickness={4} width={s.node!.healthPercent / 100}></rectangle>\r\n                              </container>\r\n                              <textBlock\r\n                                text={`${s.node?.healthPercent}%`}\r\n                                fontSize={48} fontFamily={'Arial'}\r\n                                color={(s.node?.healthPercent > 50) ? 'black' : 'white' /* temp hack */}\r\n                                verticalAlignment={Control.VERTICAL_ALIGNMENT_CENTER}\r\n                                horizontalAlignment={Control.HORIZONTAL_ALIGNMENT_CENTER}\r\n                              />\r\n                            </rectangle>\r\n                        </rectangle>\r\n                      </advancedDynamicTexture>\r\n                    </plane>\r\n                  </React.Fragment>\r\n                )\r\n              }\r\n              {selectedNodeGraph && selectedNodeGraph.connections.map((c: GraphConnections) =>\r\n                <React.Fragment key={`graph-connnection-${selectedNodeGraph.version}-${c.id}`}>\r\n                  <extrudeShape key={`arrow-${selectedNodeGraph.version}-${c.id}`} name={`l${selectedNodeGraph.version}-${c.id}`} path={c.curvePoints} shape={arrowShape} sideOrientation={ Mesh.DOUBLESIDE } cap={ Mesh.CAP_ALL }>\r\n                    <standardMaterial key={`arrow-mat-${selectedNodeGraph.version}-${c.id}`} name={`sm${selectedNodeGraph.version}-${c.id}`} diffuseColor={arrowColor} specularColor={Color3.Black()} />\r\n                  </extrudeShape>\r\n                  {(c.curvePoints !== undefined && c.lastTangent !== undefined) &&\r\n                    <cylinder key={`arrow-head-${selectedNodeGraph.version}-${c.id}`} name={`c${selectedNodeGraph.version}-${c.id}`} tessellation={3} height={0.025} diameter={0.25} position={c.curvePoints[c.curvePoints?.length - 1]} rotation={new Vector3(0, c.yRotation || 0, 0)}>\r\n                      <standardMaterial key={`arrow-head-mat-${selectedNodeGraph.version}-${c.id}`} name={`c${selectedNodeGraph.version}-${c.id}`} diffuseColor={arrowColor} specularColor={Color3.Black()} />\r\n                    </cylinder>\r\n                  }\r\n                </React.Fragment>\r\n              )}\r\n\r\n              {selectedNodeGraph === undefined &&\r\n                <plane name=\"dialog\" size={2} position={new Vector3(0, 1.5, 0)}>\r\n                  <advancedDynamicTexture name=\"dialogTexture\" height={1024} width={1024} createForParentMesh={true} hasAlpha={true}>\r\n                    <rectangle name=\"rect-1\" height={0.5} width={1} thickness={12} cornerRadius={12}>\r\n                        <rectangle>\r\n                          <textBlock text={selectedNode ? selectedNode.name : 'select a\\nbuilding'} fontFamily=\"FontAwesome\" fontStyle=\"bold\" fontSize={200} color=\"white\" />\r\n                        </rectangle>\r\n                    </rectangle>\r\n                  </advancedDynamicTexture>\r\n                </plane>\r\n              }\r\n              <environmentHelper options={{ enableGroundShadow: true /* true by default */, groundYBias: 1 }} setMainColor={[Color3.FromHexString('#74b9ff')]} />\r\n              <vrExperienceHelper webVROptions={{ createDeviceOrientationCamera: false }} enableInteractions={true} />\r\n            </Scene>\r\n          </Engine>\r\n        </Grid>\r\n        {selectedNode &&\r\n          <Grid key='form' item xs={12} sm={6}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Selected Building:\r\n            </Typography>\r\n            <strong>{selectedNode.name}</strong>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Directly connected buildings:\r\n            </Typography>\r\n            <NodeDependencies\r\n              key={`node-deps-${selectedNode.id}`}\r\n              nodes={nodes}\r\n              selectedNode={selectedNode}\r\n              addNodeDependency={addNodeDependency}\r\n              removeNodeDependency={removeNodeDependency}\r\n            />\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Building Health %:\r\n            </Typography>\r\n            <HealthSelector key={selectedNode.id} nodeId={selectedNode.id} nodeHealthPercent={selectedNode.healthPercent} updateNodeHealthPercent={updateNodeHealthPercent} />\r\n          </Grid>\r\n        }\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);","import {\r\n  GET_NODES,\r\n  ADD_NODE,\r\n  SELECT_NODE,\r\n  ADD_NODE_DEPENDENCY,\r\n  REMOVE_NODE_DEPENDENCY,\r\n  UPDATE_NODE_HEALTH\r\n} from \"./actionTypes\";\r\n\r\nexport type Node = {\r\n    name: string\r\n}\r\n\r\nexport const getNodes = () => ({\r\n    type: GET_NODES\r\n})\r\n\r\nexport const addNode = (name: string) => ({\r\n  type: ADD_NODE,\r\n  payload: { name }\r\n});\r\n\r\nexport const addNodeDependency = (fromNodeId: number, toNodeId: number) => ({\r\n  type: ADD_NODE_DEPENDENCY,\r\n  payload: { fromNodeId, toNodeId }\r\n});\r\n\r\nexport const selectNode = (id: number) => ({\r\n  type: SELECT_NODE,\r\n  payload: { id }\r\n});\r\n\r\nexport const removeNodeDependency = (fromNodeId: number, toNodeId: number) => ({\r\n  type: REMOVE_NODE_DEPENDENCY,\r\n  payload: { fromNodeId, toNodeId }\r\n})\r\n\r\nexport const updateNodeHealthPercent = (nodeId: number, healthPercent: number) => ({\r\n  type: UPDATE_NODE_HEALTH,\r\n  payload: {\r\n    nodeId,\r\n    healthPercent\r\n  }\r\n})\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\r\nimport { Provider } from 'react-redux'\r\nimport store from \"./redux/store\";\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}